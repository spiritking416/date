/*************************************************************************
	> File Name: avl.cpp
	> Author: 
	> Mail: 
	> Created Time: 2016年04月01日 星期五 08时15分58秒
 ************************************************************************/
#include<iostream>
#include<deque>
#include"avl.h"

using namespace std;

template<class type>
Bitree<type>::Bitree(){
    root=nullptr;
}

template<class type>
void Bitree<type>::insert(Binode<type>* node){
    if(node==nullptr)   return;
    Binode<type> *p,*s;
    p=nullptr;
    s=root;
    while(s!=nullptr){
        p=s;
        if(node->val<=s->val)
        {
            s=s->lc;
        }
        else
        {
            s=s->rc;
        }
        
    }
    node->p=p;
    if(p==nullptr)
    {
        root=node;
    }
    else{
        if(node->val<=p->val)
        {
            p->lc=node;
        }
        else{
            p->rc=node;
        }
    }
}


template<class type>
void Bitree<type>::preorder(Binode<type>* node){
    if(node!=nullptr){
        cout<<node->val<<' ';
        preorder(node->lc);
        preorder(node->rc);
    }  
}

template<class type>
void Bitree<type>::inorder(Binode<type>* node){
    if(node!=nullptr){
        inorder(node->lc);
        cout<<node->val<<' ';
        inorder(node->rc);
    }  
}

template<class type>
void Bitree<type>::postorder(Binode<type>* node){
    if(node!=nullptr){
        postorder(node->lc);
        postorder(node->rc);
        cout<<node->val<<' ';
    }  
}

template<class type>
void Bitree<type>::levelorder(Binode<type>* node){
    if(node==nullptr) return;
    deque<Binode<type>*> queue;
    queue.push_back(node);
    int index=queue.size();
    while(!queue.empty()){
        while(index!=0){
            cout<<queue[0]->val<<' ';
            --index;
            if(queue[0]->lc!=nullptr)
               queue.push_back(queue[0]->lc);
            if(queue[0]->rc!=nullptr)
               queue.push_back(queue[0]->rc);
            queue.pop_front();
        }
        index=queue.size();
        cout<<endl;
    }   
}

template<class type>
bool Bitree<type>::search(const type& value){
    Binode<type>* ptr=root;
    while(ptr!=nullptr){
        if(ptr->val==value){
            return true;
        }
        else if(ptr->val<value)
            ptr=ptr->rc;
        else
            ptr=ptr->lc;
    }
    p=nullptr;
    return false;
}

template<class type>
bool Bitree<type>::search(const type& value,Binode<type>*& p){
    Binode<type>* ptr=root;
    while(ptr!=nullptr){
        if(ptr->val==value){
            p=ptr;
            return true;
        }
        else if(ptr->val<value)
            ptr=ptr->rc;
        else
            ptr=ptr->lc;
    }
    p=nullptr;
    return false;
}

template<class type>
void Bitree<type>::remove(const type& value){}
    if(node==nullptr)   return;
    Bitree<type>* ptr;
    bool flag=search(value,ptr);
    if(!flag)   return;
    
}
